// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CASH
  BANK
  CARD
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  timezone           String? // 사용자의 타임존 (예: America/Toronto)
  createdAt          DateTime      @default(now())
  transactions       Transaction[]
  categories         Category[]
  budgets            Budget[]
  accounts           Account[]
  hashedRefreshToken String? // ✅ 이 필드가 없으면 추가!
}

model Account {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  name         String
  type         AccountType
  color        String? // UI 색상 (선택)
  description  String?
  balance      Float         @default(0) // 계좌 잔액
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] // 1:N 관계
}

model Transaction {
  id          String   @id @default(uuid())
  type        String // "income" 또는 "expense"
  amount      Int
  categoryId  String
  userId      String
  accountId   String
  date        DateTime
  note        String?
  description String?
  createdAt   DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  Account     Account  @relation(fields: [accountId], references: [id])
}

model Category {
  id           String           @id @default(uuid())
  name         String
  icon         String
  type         CategoryType
  userId       String
  color        String? // UI 색상 (선택)
  transactions Transaction[]
  budgets      BudgetCategory[]
  user         User             @relation(fields: [userId], references: [id])
}

model Budget {
  id        String   @id @default(uuid())
  userId    String
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User             @relation(fields: [userId], references: [id])
  categories BudgetCategory[] // N:M 관계 (카테고리별 예산)
}

model BudgetCategory {
  id         String @id @default(uuid())
  budgetId   String
  categoryId String
  amount     Int

  budget   Budget   @relation(fields: [budgetId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

enum CategoryType {
  income
  expense
}

enum TransactionType {
  income
  expense
  transfer
}
