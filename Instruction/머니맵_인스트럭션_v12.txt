머니맵 구조 문서 활용 인스트럭션 v12
==================================

이 문서는 머니맵 프로젝트의 structure.*.module.json 파일들을 가장 효과적으로 활용하기 위한 기준 문서입니다.
프론트엔드 구현, 테스트 설계, 리팩토링, 자동 문서화, Swagger 연동 등의 흐름에서 이 구조를 기준으로 작업을 진행합니다.

📦 기본 구조 설명
------------------

모든 모듈 문서는 동일한 구조를 따릅니다:

- module: 모듈명
- description: 해당 모듈의 책임과 기능 요약
- entryPoints: controller, service 등 진입점
- tests: .spec.ts 파일 위치
- dto: mainDTOs 안에 DTO 클래스명, 파일, 필드 목록, 상속 관계 (extends + composedFrom)
- routes: operation + path + method + input/output DTO + steps + exceptions 설명
- utils / guards / decorators / types: 공통 구조에 따라 분류
- files: 실제 파일 경로들

🎯 사용 목적별 가이드
----------------------

1. 프론트엔드 연동
   - 어떤 API를 호출할 때 어떤 DTO를 보내야 하는지 → `routes[].inputDto`
   - 어떤 데이터를 받는지 → `routes[].outputDto`
   - 필드 구조 → `dto.mainDTOs[].fields`

2. 테스트 자동화
   - mockHelpers.ts 구성할 때 → DTO 필드와 required 여부 기반
   - exception 케이스 설계 → `routes[].exceptions`

3. 리팩토링 기준
   - 어떤 DTO가 공통 Base로 연결되어 있는지 파악 → extends + composedFrom 추적
   - 파일 단위로 구조가 어떻게 퍼져 있는지 파악 → `dto[].file`, `utils[]`, `files[]`

4. Swagger 문서 자동화
   - API path / method 기반 → `routes[]`
   - DTO 기반 자동 schema 생성 → `dto[].fields`

🧩 각 모듈 별 특징
-------------------

- stats: 통계용 DTO가 group-item / detail / summary 구조로 구분되어 있음
- transactions: $transaction 기반 계좌 잔액 재계산 및 transfer 쌍 연결 구조 포함
- accounts: opening transaction, dashboard 관련 DTO 포함
- budgets: 기간 필터, category + amount 매핑 구조
- categories: 가장 단순하지만 공통 request DTO(BaseCategoryDTO) 기반
- common: 전역 query DTO와 types 기반 enum 모음
- lib: date.util.ts / token.helper.ts 등 핵심 유틸과 헬퍼 함수
- prisma: 모델, 필드, 관계, enum 전부 포함
- test: mockHelpers.ts 중심으로 mock 객체 및 테스트 도우미 구조 포함
- config: 현재 명시적인 설정은 없지만 파일 구조 기준으로 모듈화 가능

🔗 전체 모듈 zip 경로
----------------------
- modules-structure.zip: 전체 통합 모듈들

작성자: ChatGPT + 너

📐 문서 해석 및 작업 규칙
-------------------------

1. 이 문서의 모든 정보는 실제 structure.*.module.json 기준으로만 해석하며,  
   추론 또는 일반적인 유추 방식은 사용하지 않는다.

2. 실제 코드를 기준으로 작성된 정보만 사용한다.  
   "보통은", "대개는", "일반적으로" 등의 문장은 구조 문서에 포함되지 않는다.

3. 모든 경로 정보는 실제 프로젝트 디렉토리(src/) 기준으로 작성되어야 하며,  
   존재하지 않는 경로를 참조할 경우 AI는 즉시 사용자에게 명시적으로 알려야 한다.

4. 파일이 존재하지 않거나 접근이 불가능한 경우,  
   AI는 이를 감추지 않고 `파일 접근 불가`, `경로 누락`, `추가 스캔 필요` 등의 메시지로 정확하게 명시한다.

5. 기존 프로젝트 설명, 구조 설명 등은 이 structure 문서들을 기준으로 통합 관리되며,  
   이전 텍스트 기반 설명 문서는 deprecated 처리될 수 있다.
